{"ast":null,"code":"import * as d3 from 'd3';\nexport const drawChart = (formattedData, chartRef, hour = true) => {\n  const labels = formattedData.map(el => el.label);\n  const values = formattedData.map(el => el.value);\n  const containerHeight = chartRef.current.clientHeight;\n  const containerWidth = chartRef.current.clientWidth;\n  console.log({\n    containerWidth,\n    containerHeight\n  });\n  let svg = d3.select(chartRef.current).append(\"svg\") // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  // .attr(\"viewBox\", \"0 0 300 300\")\n  .attr(\"width\", containerWidth).attr(\"height\", containerHeight).classed(\"svg-content\", true);\n  let selection = svg.selectAll(\"rect\").data(formattedData); // let yScale = d3.scaleLinear()\n  //   .domain([0, d3.max(values)])\n  //   .range([0, containerHeight - 100]);\n\n  let yScale = d3.scaleBand().domain([labels]).range([0, containerWidth]); // add axis and labels\n\n  svg.append(\"g\").attr(\"transform\", \"translate(0,250)\") // This controls the vertical position of the Axis\n  .call(d3.axisBottom(yScale)); // let xDateScale = d3.scalePoint()\n  //     .domain(labels)\n  //     .range([0, containerWidth])\n  // svg\n  //   .append(\"g\")\n  //   .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n  //   .call(d3.axisBottom(xDateScale));\n  // let y_axis = d3.axisLeft()\n  //   .scale(yScale);\n  // svg.append(\"g\")\n  //   .attr(\"transform\", \"translate(0, 0)\")\n  //   .call(y_axis);\n\n  selection.transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n  selection.enter().append(\"rect\").attr(\"x\", d => yScale(d.label)).attr(\"y\", d => containerHeight).attr(\"width\", 40).attr(\"height\", 0).attr(\"fill\", \"steelblue\").transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n  selection.exit().transition().duration(300).attr(\"y\", d => containerHeight).attr(\"height\", 0).remove();\n};","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/utils/chart.ts"],"names":["d3","drawChart","formattedData","chartRef","hour","labels","map","el","label","values","value","containerHeight","current","clientHeight","containerWidth","clientWidth","console","log","svg","select","append","attr","classed","selection","selectAll","data","yScale","scaleBand","domain","range","call","axisBottom","transition","duration","d","enter","exit","remove"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAKA,OAAO,MAAMC,SAAS,GAAG,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,IAAI,GAAC,IAA/B,KAAwC;AAG/D,QAAMC,MAAM,GAAGH,aAAa,CAACI,GAAd,CAAkBC,EAAE,IAAIA,EAAE,CAACC,KAA3B,CAAf;AACA,QAAMC,MAAM,GAAGP,aAAa,CAACI,GAAd,CAAkBC,EAAE,IAAIA,EAAE,CAACG,KAA3B,CAAf;AACA,QAAMC,eAAe,GAAGR,QAAQ,CAACS,OAAT,CAAiBC,YAAzC;AACA,QAAMC,cAAc,GAAGX,QAAQ,CAACS,OAAT,CAAiBG,WAAxC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA,cAAD;AAAiBH,IAAAA;AAAjB,GAAZ;AAEA,MAAIO,GAAG,GAAGlB,EAAE,CAACmB,MAAH,CAAUhB,QAAQ,CAACS,OAAnB,EACPQ,MADO,CACA,KADA,EAER;AACA;AAHQ,GAIPC,IAJO,CAIF,OAJE,EAIOP,cAJP,EAKPO,IALO,CAKF,QALE,EAKQV,eALR,EAMPW,OANO,CAMC,aAND,EAMgB,IANhB,CAAV;AAQA,MAAIC,SAAS,GAAGL,GAAG,CAACM,SAAJ,CAAc,MAAd,EAAsBC,IAAtB,CAA2BvB,aAA3B,CAAhB,CAjB+D,CAkB/D;AACA;AACA;;AAEA,MAAIwB,MAAM,GAAG1B,EAAE,CAAC2B,SAAH,GACVC,MADU,CACH,CAACvB,MAAD,CADG,EAEVwB,KAFU,CAEJ,CAAC,CAAD,EAAIf,cAAJ,CAFI,CAAb,CAtB+D,CA0B/D;;AACAI,EAAAA,GAAG,CACAE,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,WAFR,EAEqB,kBAFrB,EAE8C;AAF9C,GAGGS,IAHH,CAGQ9B,EAAE,CAAC+B,UAAH,CAAcL,MAAd,CAHR,EA3B+D,CAiC/D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEAH,EAAAA,SAAS,CACRS,UADD,GACcC,QADd,CACuB,GADvB,EAEKZ,IAFL,CAEU,QAFV,EAEqBa,CAAD,IAAOR,MAAM,CAACQ,CAAD,CAFjC,EAGKb,IAHL,CAGU,GAHV,EAGgBa,CAAD,IAAOvB,eAAe,GAAGe,MAAM,CAACQ,CAAD,CAH9C;AAKAX,EAAAA,SAAS,CACNY,KADH,GAEGf,MAFH,CAEU,MAFV,EAGGC,IAHH,CAGQ,GAHR,EAGaa,CAAD,IAAOR,MAAM,CAACQ,CAAC,CAAC1B,KAAH,CAHzB,EAIGa,IAJH,CAIQ,GAJR,EAIca,CAAD,IAAOvB,eAJpB,EAKGU,IALH,CAKQ,OALR,EAKiB,EALjB,EAMGA,IANH,CAMQ,QANR,EAMkB,CANlB,EAOGA,IAPH,CAOQ,MAPR,EAOgB,WAPhB,EAQGW,UARH,GAQgBC,QARhB,CAQyB,GARzB,EASGZ,IATH,CASQ,QATR,EASmBa,CAAD,IAAOR,MAAM,CAACQ,CAAD,CAT/B,EAUGb,IAVH,CAUQ,GAVR,EAUca,CAAD,IAAOvB,eAAe,GAAGe,MAAM,CAACQ,CAAD,CAV5C;AAaAX,EAAAA,SAAS,CACNa,IADH,GAEGJ,UAFH,GAEgBC,QAFhB,CAEyB,GAFzB,EAGOZ,IAHP,CAGY,GAHZ,EAGkBa,CAAD,IAAOvB,eAHxB,EAIOU,IAJP,CAIY,QAJZ,EAIsB,CAJtB,EAKGgB,MALH;AAOD,CAzEM","sourcesContent":["import * as d3 from 'd3'\n\n\n\n\nexport const drawChart = (formattedData, chartRef, hour=true) => {\n  \n  \n  const labels = formattedData.map(el => el.label)\n  const values = formattedData.map(el => el.value)\n  const containerHeight = chartRef.current.clientHeight\n  const containerWidth = chartRef.current.clientWidth\n  console.log({containerWidth, containerHeight})\n  \n  let svg = d3.select(chartRef.current)\n    .append(\"svg\")\n    // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    // .attr(\"viewBox\", \"0 0 300 300\")\n    .attr(\"width\", containerWidth)\n    .attr(\"height\", containerHeight)\n    .classed(\"svg-content\", true)  \n  \n  let selection = svg.selectAll(\"rect\").data(formattedData);\n  // let yScale = d3.scaleLinear()\n  //   .domain([0, d3.max(values)])\n  //   .range([0, containerHeight - 100]);\n \n  let yScale = d3.scaleBand()\n    .domain([labels])\n    .range([0, containerWidth]);\n \n  // add axis and labels\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0,250)\")      // This controls the vertical position of the Axis\n    .call(d3.axisBottom(yScale));\n\n\n  // let xDateScale = d3.scalePoint()\n  //     .domain(labels)\n  //     .range([0, containerWidth])\n  // svg\n  //   .append(\"g\")\n  //   .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n  //   .call(d3.axisBottom(xDateScale));\n  \n  // let y_axis = d3.axisLeft()\n  //   .scale(yScale);\n\n  // svg.append(\"g\")\n  //   .attr(\"transform\", \"translate(0, 0)\")\n  //   .call(y_axis);\n  \n  selection\n  .transition().duration(300)\n      .attr(\"height\", (d) => yScale(d))\n      .attr(\"y\", (d) => containerHeight - yScale(d))\n  \n  selection\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\",(d) => yScale(d.label))\n    .attr(\"y\", (d) => containerHeight)\n    .attr(\"width\", 40)\n    .attr(\"height\", 0)\n    .attr(\"fill\", \"steelblue\")\n    .transition().duration(300)\n    .attr(\"height\", (d) => yScale(d))\n    .attr(\"y\", (d) => containerHeight - yScale(d))\n  \n\n  selection\n    .exit()\n    .transition().duration(300)\n        .attr(\"y\", (d) => containerHeight)\n        .attr(\"height\", 0)\n    .remove()\n\n}"]},"metadata":{},"sourceType":"module"}