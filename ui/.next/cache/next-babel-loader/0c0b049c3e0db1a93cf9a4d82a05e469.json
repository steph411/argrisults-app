{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3';\n\nlet Flag = ({\n  className,\n  color,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    className: className,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nFlag = styled(Flag).withConfig({\n  displayName: \"Forecasts__Flag\",\n  componentId: \"sc-373ftp-0\"\n})([\"background:\", \";padding:8px 20px;color:white;border-radius:20px;&:hover{cursor:pointer;box-shadow:var(--shadow-sm);}\"], props => props.color ? `var(${props.color})` : \"var(--green)\");\n\nlet Forecasts = ({\n  className,\n  chartData = []\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    let todayData = chartData[0].forecast;\n    let formattedData = todayData.map((el, i) => {\n      // console.log({ element: el });\n      return el.temperatures.value;\n    });\n    let formattedDataDates = todayData.map((el, i) => {\n      return el.endTime.split(\"T\")[1].split(\"+\")[0];\n    });\n    const containerHeight = chartRef.current.clientHeight;\n    const containerWidth = chartRef.current.clientWidth;\n    console.log({\n      containerWidth,\n      containerHeight\n    });\n    let svg = d3.select(chartRef.current).append(\"svg\") // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    // .attr(\"viewBox\", \"0 0 300 300\")\n    .attr(\"width\", containerWidth).attr(\"height\", containerHeight).classed(\"svg-content\", true);\n    let selection = svg.selectAll(\"rect\").data(formattedData);\n    let yScale = d3.scaleLinear().domain([0, d3.max(formattedData)]).range([0, containerHeight - 100]);\n    let xDateScale = d3.scalePoint().domain(formattedDataDates).range([0, containerWidth]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0, 300)\") // This controls the vertical position of the Axis\n    .call(d3.axisBottom(xDateScale));\n    let y_axis = d3.axisLeft().scale(yScale);\n    svg.append(\"g\").attr(\"transform\", \"translate(0, 0)\").call(y_axis);\n    selection.transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n    selection.enter().append(\"rect\").attr(\"x\", (d, i) => i * 45).attr(\"y\", d => containerHeight).attr(\"width\", 40).attr(\"height\", 0).attr(\"fill\", \"steelblue\").transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n    selection.exit().transition().duration(300).attr(\"y\", d => containerHeight).attr(\"height\", 0).remove();\n  }, [chartData]);\n  const flags = [{\n    text: \"today\",\n    color: \"--blue\"\n  }, {\n    text: \"month\",\n    color: \"--green\"\n  }, {\n    text: \"year\",\n    color: \"--teal\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphic\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Forecasts since\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), flags.map((flag, index) => /*#__PURE__*/_jsxDEV(Flag, {\n          text: flag.text,\n          color: flag.color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\nForecasts = styled(Forecasts).withConfig({\n  displayName: \"Forecasts\",\n  componentId: \"sc-373ftp-1\"\n})([\"height:498px;background:var(--grey-light);box-shadow:var(--shadow-sm);width:100%;border-radius:10px;padding:30px;display:grid;grid-template-columns:70% 1fr;grid-column-gap:10px;grid-area:forecasts;align-self:start;justify-content:space-between;.header{padding:0px 0px 20px 0;width:100%;display:flex;justify-content:space-between;}.graphic{}.chart{height:378px;background:white;box-shadow:var(--shadow-sm);position:relative;width:100%;vertical-align:top;overflow:hidden;}.parameters{height:378px;background:white;box-shadow:var(--shadow-sm);align-self:flex-end;}\"]);\nexport default Forecasts;","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx"],"names":["React","useRef","useEffect","styled","d3","Flag","className","color","text","props","Forecasts","chartData","chartRef","todayData","forecast","formattedData","map","el","i","temperatures","value","formattedDataDates","endTime","split","containerHeight","current","clientHeight","containerWidth","clientWidth","console","log","svg","select","append","attr","classed","selection","selectAll","data","yScale","scaleLinear","domain","max","range","xDateScale","scalePoint","call","axisBottom","y_axis","axisLeft","scale","transition","duration","d","enter","exit","remove","flags","flag","index"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport styled from 'styled-components'\nimport * as d3 from 'd3';\n\ninterface Props {\n  className?: string \n  chartData?: any[] \n}\n\ninterface FlagProps{\n  className?: string\n  color?: string\n  text: string\n}\nlet Flag: React.FC<FlagProps> = ({ className, color, text }) => {\n  return (\n    <a className={className}>\n       {text} \n    </a>\n  )\n}\n\nFlag = styled(Flag)`\n  background: ${(props) => props.color? `var(${props.color})`: \"var(--green)\"};\n  padding: 8px 20px;\n  color: white;\n  border-radius: 20px;\n\n  &:hover{\n    cursor: pointer;\n    box-shadow: var(--shadow-sm);\n  }\n  \n`\n\n\n\n\n\nlet Forecasts: React.FC<Props> = ({ className, chartData = [] }) => {\n  const chartRef = useRef(null)\n\n\n\n\n\n  useEffect(() => {\n    let todayData = chartData[0].forecast\n    let formattedData = todayData.map((el, i) => {\n      // console.log({ element: el });\n      return el.temperatures.value\n    });\n    let formattedDataDates = todayData.map((el, i) => {\n      return el.endTime.split(\"T\")[1].split(\"+\")[0]\n    })\n    const containerHeight = chartRef.current.clientHeight\n    const containerWidth = chartRef.current.clientWidth\n    console.log({containerWidth, containerHeight})\n    \n    let svg = d3.select(chartRef.current)\n      .append(\"svg\")\n      // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      // .attr(\"viewBox\", \"0 0 300 300\")\n      .attr(\"width\", containerWidth)\n      .attr(\"height\", containerHeight)\n      .classed(\"svg-content\", true)  \n    \n    let selection = svg.selectAll(\"rect\").data(formattedData);\n    let yScale = d3.scaleLinear()\n      .domain([0, d3.max(formattedData)])\n      .range([0, containerHeight - 100]);\n    \n    let xDateScale = d3.scalePoint()\n      .domain(formattedDataDates)\n      .range([0, containerWidth])\n    \n    svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0, 300)\")      // This controls the vertical position of the Axis\n      .call(d3.axisBottom(xDateScale));\n    \n    let y_axis = d3.axisLeft()\n      .scale(yScale);\n\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0, 0)\")\n      .call(y_axis);\n    \n    selection\n    .transition().duration(300)\n        .attr(\"height\", (d) => yScale(d))\n        .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n    selection\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => i * 45)\n      .attr(\"y\", (d) => containerHeight)\n      .attr(\"width\", 40)\n      .attr(\"height\", 0)\n      .attr(\"fill\", \"steelblue\")\n      .transition().duration(300)\n      .attr(\"height\", (d) => yScale(d))\n      .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n\n    selection\n      .exit()\n      .transition().duration(300)\n          .attr(\"y\", (d) => containerHeight)\n          .attr(\"height\", 0)\n      .remove()\n  \n    },\n    [chartData]\n  )\n\n\n\n\n  const flags: any[] = [\n    {\n      text: \"today\",\n      color: \"--blue\"\n    },\n    {\n      text: \"month\",\n      color: \"--green\"\n    },\n    {\n      text: \"year\",\n      color: \"--teal\"\n    },\n  ]\n  return (\n    <section className={className}>\n      <div className=\"graphic\">\n        <div className=\"header\">\n          <span>Forecasts since</span>\n          {flags.map((flag, index) => (\n            <Flag\n              text={flag.text}\n              color={flag.color}\n              key={index}\n            />)\n          )}\n        </div>\n        <div className=\"chart\" id=\"chart\" ref={chartRef}>\n          \n        </div>\n      </div>\n      <div className=\"parameters\">\n\n      </div>\n    </section>\n  )\n}\n\n\nForecasts = styled(Forecasts)`\n  height: 498px;\n  background: var(--grey-light);\n  box-shadow: var(--shadow-sm);\n  width: 100%;\n  border-radius: 10px;\n  padding: 30px;\n  display: grid;\n  grid-template-columns: 70% 1fr;\n  grid-column-gap: 10px;\n  grid-area: forecasts;\n  align-self: start;\n  justify-content: space-between;\n\n  .header{\n    padding: 0px 0px 20px 0;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .graphic{\n    /* width: 70%; */\n  }\n  \n  .chart{\n    /* width: 694px; */\n    height: 378px;\n    background: white;\n    box-shadow: var(--shadow-sm);\n    position: relative;\n    width: 100%;\n    vertical-align: top;\n    overflow: hidden;\n  }\n\n\n\n  .parameters{\n    height: 378px;\n    /* width: 28%; */\n    background: white;\n    box-shadow: var(--shadow-sm);\n    align-self: flex-end;\n    \n  }\n`\n\nexport default  Forecasts"]},"metadata":{},"sourceType":"module"}