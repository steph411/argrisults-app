{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3';\n\nlet Flag = ({\n  className,\n  color,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    className: className,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nFlag = styled(Flag).withConfig({\n  displayName: \"Forecasts__Flag\",\n  componentId: \"sc-373ftp-0\"\n})([\"background:\", \";padding:8px 20px;color:white;border-radius:20px;&:hover{cursor:pointer;box-shadow:var(--shadow-sm);}\"], props => props.color ? `var(${props.color})` : \"var(--green)\");\n\nlet Forecasts = ({\n  className,\n  chartData = []\n}) => {\n  const chartRef = useRef(null);\n  useEffect(() => {\n    let todayData = chartData[0].forecast;\n    let formattedData = todayData.map((el, i) => {\n      // console.log({ element: el });\n      return el.temperatures.value;\n    });\n    const containerHeight = chartRef.current.clientHeight;\n    const containerWidth = chartRef.current.clientWidth;\n    console.log({\n      containerWidth,\n      containerHeight\n    });\n    let svg = d3.select(chartRef.current).append(\"svg\") // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    // .attr(\"viewBox\", \"0 0 300 300\")\n    .attr(\"width\", containerWidth).attr(\"height\", containerHeight).classed(\"svg-content\", true);\n    let selection = svg.selectAll(\"rect\").data(formattedData);\n    let yScale = d3.scaleLinear().domain([0, d3.max(formattedData)]); // .range([0, height-100]);\n\n    selection.transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n    selection.enter().append(\"rect\").attr(\"x\", (d, i) => i * 45).attr(\"y\", d => containerHeight).attr(\"width\", 40) // .attr(\"height\", 0)\n    .attr(\"fill\", \"steelblue\").transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d)); // selection\n    //   .exit()\n    //   .transition().duration(300)\n    //       .attr(\"y\", (d) => containerHeight)\n    //       .attr(\"height\", 0)\n    //   .remove()\n  }, [chartData]);\n  const flags = [{\n    text: \"today\",\n    color: \"--blue\"\n  }, {\n    text: \"month\",\n    color: \"--green\"\n  }, {\n    text: \"year\",\n    color: \"--teal\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphic\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Forecasts since\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), flags.map((flag, index) => /*#__PURE__*/_jsxDEV(Flag, {\n          text: flag.text,\n          color: flag.color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\nForecasts = styled(Forecasts).withConfig({\n  displayName: \"Forecasts\",\n  componentId: \"sc-373ftp-1\"\n})([\"height:498px;background:var(--grey-light);box-shadow:var(--shadow-sm);width:100%;border-radius:10px;padding:30px;display:grid;grid-template-columns:70% 1fr;grid-column-gap:10px;grid-area:forecasts;align-self:start;justify-content:space-between;.header{padding:0px 0px 20px 0;width:100%;display:flex;justify-content:space-between;}.graphic{}.chart{height:378px;background:white;box-shadow:var(--shadow-sm);position:relative;width:100%;padding-bottom:100%;vertical-align:top;overflow:hidden;}.parameters{height:378px;background:white;box-shadow:var(--shadow-sm);align-self:flex-end;}\"]);\nexport default Forecasts;","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx"],"names":["React","useRef","useEffect","styled","d3","Flag","className","color","text","props","Forecasts","chartData","chartRef","todayData","forecast","formattedData","map","el","i","temperatures","value","containerHeight","current","clientHeight","containerWidth","clientWidth","console","log","svg","select","append","attr","classed","selection","selectAll","data","yScale","scaleLinear","domain","max","transition","duration","d","enter","flags","flag","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAYA,IAAIC,IAAyB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAgC;AAC9D,sBACE;AAAG,IAAA,SAAS,EAAEF,SAAd;AAAA,cACIE;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQAH,IAAI,GAAGF,MAAM,CAACE,IAAD,CAAT;AAAA;AAAA;AAAA,6HACaI,KAAD,IAAWA,KAAK,CAACF,KAAN,GAAc,OAAME,KAAK,CAACF,KAAM,GAAhC,GAAoC,cAD3D,CAAJ;;AAiBA,IAAIG,SAA0B,GAAG,CAAC;AAAEJ,EAAAA,SAAF;AAAaK,EAAAA,SAAS,GAAG;AAAzB,CAAD,KAAmC;AAClE,QAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;AAMAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAS,GAAGF,SAAS,CAAC,CAAD,CAAT,CAAaG,QAA7B;AACA,QAAIC,aAAa,GAAGF,SAAS,CAACG,GAAV,CAAc,CAACC,EAAD,EAAKC,CAAL,KAAW;AAC3C;AACA,aAAOD,EAAE,CAACE,YAAH,CAAgBC,KAAvB;AACD,KAHmB,CAApB;AAIA,UAAMC,eAAe,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,YAAzC;AACA,UAAMC,cAAc,GAAGZ,QAAQ,CAACU,OAAT,CAAiBG,WAAxC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA,cAAD;AAAiBH,MAAAA;AAAjB,KAAZ;AAEA,QAAIO,GAAG,GAAGxB,EAAE,CAACyB,MAAH,CAAUjB,QAAQ,CAACU,OAAnB,EACPQ,MADO,CACA,KADA,EAER;AACA;AAHQ,KAIPC,IAJO,CAIF,OAJE,EAIOP,cAJP,EAKPO,IALO,CAKF,QALE,EAKQV,eALR,EAMPW,OANO,CAMC,aAND,EAMgB,IANhB,CAAV;AAQA,QAAIC,SAAS,GAAGL,GAAG,CAACM,SAAJ,CAAc,MAAd,EAAsBC,IAAtB,CAA2BpB,aAA3B,CAAhB;AACA,QAAIqB,MAAM,GAAGhC,EAAE,CAACiC,WAAH,GACVC,MADU,CACH,CAAC,CAAD,EAAIlC,EAAE,CAACmC,GAAH,CAAOxB,aAAP,CAAJ,CADG,CAAb,CAnBc,CAqBZ;;AAEFkB,IAAAA,SAAS,CACRO,UADD,GACcC,QADd,CACuB,GADvB,EAEKV,IAFL,CAEU,QAFV,EAEqBW,CAAD,IAAON,MAAM,CAACM,CAAD,CAFjC,EAGKX,IAHL,CAGU,GAHV,EAGgBW,CAAD,IAAOrB,eAAe,GAAGe,MAAM,CAACM,CAAD,CAH9C;AAKAT,IAAAA,SAAS,CACNU,KADH,GAEGb,MAFH,CAEU,MAFV,EAGGC,IAHH,CAGQ,GAHR,EAGa,CAACW,CAAD,EAAIxB,CAAJ,KAAUA,CAAC,GAAG,EAH3B,EAIGa,IAJH,CAIQ,GAJR,EAIcW,CAAD,IAAOrB,eAJpB,EAKGU,IALH,CAKQ,OALR,EAKiB,EALjB,EAME;AANF,KAOGA,IAPH,CAOQ,MAPR,EAOgB,WAPhB,EAQGS,UARH,GAQgBC,QARhB,CAQyB,GARzB,EASGV,IATH,CASQ,QATR,EASmBW,CAAD,IAAON,MAAM,CAACM,CAAD,CAT/B,EAUGX,IAVH,CAUQ,GAVR,EAUcW,CAAD,IAAOrB,eAAe,GAAGe,MAAM,CAACM,CAAD,CAV5C,EA5Bc,CAyCd;AACA;AACA;AACA;AACA;AACA;AAEC,GAhDM,EAiDP,CAAC/B,SAAD,CAjDO,CAAT;AAuDA,QAAMiC,KAAY,GAAG,CACnB;AACEpC,IAAAA,IAAI,EAAE,OADR;AAEED,IAAAA,KAAK,EAAE;AAFT,GADmB,EAKnB;AACEC,IAAAA,IAAI,EAAE,OADR;AAEED,IAAAA,KAAK,EAAE;AAFT,GALmB,EASnB;AACEC,IAAAA,IAAI,EAAE,MADR;AAEED,IAAAA,KAAK,EAAE;AAFT,GATmB,CAArB;AAcA,sBACE;AAAS,IAAA,SAAS,EAAED,SAApB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGsC,KAAK,CAAC5B,GAAN,CAAU,CAAC6B,IAAD,EAAOC,KAAP,kBACT,QAAC,IAAD;AACE,UAAA,IAAI,EAAED,IAAI,CAACrC,IADb;AAEE,UAAA,KAAK,EAAEqC,IAAI,CAACtC;AAFd,WAGOuC,KAHP;AAAA;AAAA;AAAA;AAAA,gBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,EAAE,EAAC,OAA1B;AAAkC,QAAA,GAAG,EAAElC;AAAvC;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAlGD;;AAqGAF,SAAS,GAAGP,MAAM,CAACO,SAAD,CAAT;AAAA;AAAA;AAAA,6kBAAT;AAiDA,eAAgBA,SAAhB","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport styled from 'styled-components'\nimport * as d3 from 'd3';\n\ninterface Props {\n  className?: string \n  chartData?: any[] \n}\n\ninterface FlagProps{\n  className?: string\n  color?: string\n  text: string\n}\nlet Flag: React.FC<FlagProps> = ({ className, color, text }) => {\n  return (\n    <a className={className}>\n       {text} \n    </a>\n  )\n}\n\nFlag = styled(Flag)`\n  background: ${(props) => props.color? `var(${props.color})`: \"var(--green)\"};\n  padding: 8px 20px;\n  color: white;\n  border-radius: 20px;\n\n  &:hover{\n    cursor: pointer;\n    box-shadow: var(--shadow-sm);\n  }\n  \n`\n\n\n\n\n\nlet Forecasts: React.FC<Props> = ({ className, chartData = [] }) => {\n  const chartRef = useRef(null)\n\n\n\n\n\n  useEffect(() => {\n    let todayData = chartData[0].forecast\n    let formattedData = todayData.map((el, i) => {\n      // console.log({ element: el });\n      return el.temperatures.value\n    });\n    const containerHeight = chartRef.current.clientHeight\n    const containerWidth = chartRef.current.clientWidth\n    console.log({containerWidth, containerHeight})\n    \n    let svg = d3.select(chartRef.current)\n      .append(\"svg\")\n      // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      // .attr(\"viewBox\", \"0 0 300 300\")\n      .attr(\"width\", containerWidth)\n      .attr(\"height\", containerHeight)\n      .classed(\"svg-content\", true)  \n    \n    let selection = svg.selectAll(\"rect\").data(formattedData);\n    let yScale = d3.scaleLinear()\n      .domain([0, d3.max(formattedData)])\n      // .range([0, height-100]);\n    \n    selection\n    .transition().duration(300)\n        .attr(\"height\", (d) => yScale(d))\n        .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n    selection\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => i * 45)\n      .attr(\"y\", (d) => containerHeight)\n      .attr(\"width\", 40)\n      // .attr(\"height\", 0)\n      .attr(\"fill\", \"steelblue\")\n      .transition().duration(300)\n      .attr(\"height\", (d) => yScale(d))\n      .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n\n    // selection\n    //   .exit()\n    //   .transition().duration(300)\n    //       .attr(\"y\", (d) => containerHeight)\n    //       .attr(\"height\", 0)\n    //   .remove()\n  \n    },\n    [chartData]\n  )\n\n\n\n\n  const flags: any[] = [\n    {\n      text: \"today\",\n      color: \"--blue\"\n    },\n    {\n      text: \"month\",\n      color: \"--green\"\n    },\n    {\n      text: \"year\",\n      color: \"--teal\"\n    },\n  ]\n  return (\n    <section className={className}>\n      <div className=\"graphic\">\n        <div className=\"header\">\n          <span>Forecasts since</span>\n          {flags.map((flag, index) => (\n            <Flag\n              text={flag.text}\n              color={flag.color}\n              key={index}\n            />)\n          )}\n        </div>\n        <div className=\"chart\" id=\"chart\" ref={chartRef}>\n          \n        </div>\n      </div>\n      <div className=\"parameters\">\n\n      </div>\n    </section>\n  )\n}\n\n\nForecasts = styled(Forecasts)`\n  height: 498px;\n  background: var(--grey-light);\n  box-shadow: var(--shadow-sm);\n  width: 100%;\n  border-radius: 10px;\n  padding: 30px;\n  display: grid;\n  grid-template-columns: 70% 1fr;\n  grid-column-gap: 10px;\n  grid-area: forecasts;\n  align-self: start;\n  justify-content: space-between;\n\n  .header{\n    padding: 0px 0px 20px 0;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .graphic{\n    /* width: 70%; */\n  }\n  \n  .chart{\n    /* width: 694px; */\n    height: 378px;\n    background: white;\n    box-shadow: var(--shadow-sm);\n    position: relative;\n    width: 100%;\n    padding-bottom: 100%;\n    vertical-align: top;\n    overflow: hidden;\n  }\n\n\n\n  .parameters{\n    height: 378px;\n    /* width: 28%; */\n    background: white;\n    box-shadow: var(--shadow-sm);\n    align-self: flex-end;\n    \n  }\n`\n\nexport default  Forecasts"]},"metadata":{},"sourceType":"module"}