{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx\";\nimport React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { drawChart } from '../utils';\n\nlet Flag = ({\n  className,\n  color,\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    className: className,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nFlag = styled(Flag).withConfig({\n  displayName: \"Forecasts__Flag\",\n  componentId: \"sc-373ftp-0\"\n})([\"background:\", \";padding:8px 20px;color:white;border-radius:20px;&:hover{cursor:pointer;box-shadow:var(--shadow-sm);}\"], props => props.color ? `var(${props.color})` : \"var(--green)\");\n\nlet Forecasts = ({\n  className,\n  chartData = []\n}) => {\n  const chartRef = useRef(null);\n  const hour = true;\n  useEffect(() => {\n    let data = chartData;\n\n    if (hour) {\n      data = chartData[0].forecast;\n    }\n\n    let formattedData = data.map((el, i) => {\n      // console.log({ element: el });\n      if (hour) {\n        return {\n          label: el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0, 2),\n          value: el.temperatures.value\n        };\n      } else {\n        return {\n          label: el.date,\n          value: el.forecast[12].temperatures.value\n        };\n      }\n    }); // let formattedDataDates = data.map((el, i) => {\n    //   return el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0,2)\n    // })\n\n    drawChart(formattedData, chartRef); // const containerHeight = chartRef.current.clientHeight\n    // const containerWidth = chartRef.current.clientWidth\n    // console.log({containerWidth, containerHeight})\n    // let svg = d3.select(chartRef.current)\n    //   .append(\"svg\")\n    //   // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    //   // .attr(\"viewBox\", \"0 0 300 300\")\n    //   .attr(\"width\", containerWidth)\n    //   .attr(\"height\", containerHeight)\n    //   .classed(\"svg-content\", true)  \n    // let selection = svg.selectAll(\"rect\").data(formattedData);\n    // let yScale = d3.scaleLinear()\n    //   .domain([0, d3.max(formattedData)])\n    //   .range([0, containerHeight - 100]);\n    // let xDateScale = d3.scalePoint()\n    //   .domain(formattedDataDates)\n    //   .range([0, containerWidth])\n    // svg\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n    //   .call(d3.axisBottom(xDateScale));\n    // let y_axis = d3.axisLeft()\n    //   .scale(yScale);\n    // svg.append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")\n    //   .call(y_axis);\n    // selection\n    // .transition().duration(300)\n    //     .attr(\"height\", (d) => yScale(d))\n    //     .attr(\"y\", (d) => containerHeight - yScale(d))\n    // selection\n    //   .enter()\n    //   .append(\"rect\")\n    //   .attr(\"x\", (d, i) => i * 45)\n    //   .attr(\"y\", (d) => containerHeight)\n    //   .attr(\"width\", 40)\n    //   .attr(\"height\", 0)\n    //   .attr(\"fill\", \"steelblue\")\n    //   .transition().duration(300)\n    //   .attr(\"height\", (d) => yScale(d))\n    //   .attr(\"y\", (d) => containerHeight - yScale(d))\n    // selection\n    //   .exit()\n    //   .transition().duration(300)\n    //       .attr(\"y\", (d) => containerHeight)\n    //       .attr(\"height\", 0)\n    //   .remove()\n  }, [chartData]);\n  const flags = [{\n    text: \"today\",\n    color: \"--blue\"\n  }, {\n    text: \"month\",\n    color: \"--green\"\n  }, {\n    text: \"year\",\n    color: \"--teal\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphic\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Forecasts since\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), flags.map((flag, index) => /*#__PURE__*/_jsxDEV(Flag, {\n          text: flag.text,\n          color: flag.color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\nForecasts = styled(Forecasts).withConfig({\n  displayName: \"Forecasts\",\n  componentId: \"sc-373ftp-1\"\n})([\"height:498px;background:var(--grey-light);box-shadow:var(--shadow-sm);width:100%;border-radius:10px;padding:30px;display:grid;grid-template-columns:70% 1fr;grid-column-gap:10px;grid-area:forecasts;align-self:start;justify-content:space-between;.header{padding:0px 0px 20px 0;width:100%;display:flex;justify-content:space-between;}.graphic{}.chart{height:378px;background:white;box-shadow:var(--shadow-sm);position:relative;width:100%;vertical-align:top;overflow:hidden;}.parameters{height:378px;background:white;box-shadow:var(--shadow-sm);align-self:flex-end;}\"]);\nexport default Forecasts;","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/components/Forecasts.tsx"],"names":["React","useRef","useEffect","styled","drawChart","Flag","className","color","text","props","Forecasts","chartData","chartRef","hour","data","forecast","formattedData","map","el","i","label","endTime","split","slice","value","temperatures","date","flags","flag","index"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport styled from 'styled-components'\nimport { drawChart } from '../utils'\n\ninterface Props {\n  className?: string \n  chartData?: any[] \n}\n\ninterface FlagProps{\n  className?: string\n  color?: string\n  text: string\n}\nlet Flag: React.FC<FlagProps> = ({ className, color, text }) => {\n  return (\n    <a className={className}>\n       {text} \n    </a>\n  )\n}\n\nFlag = styled(Flag)`\n  background: ${(props) => props.color? `var(${props.color})`: \"var(--green)\"};\n  padding: 8px 20px;\n  color: white;\n  border-radius: 20px;\n\n  &:hover{\n    cursor: pointer;\n    box-shadow: var(--shadow-sm);\n  }\n  \n`\n\n\n\n\n\nlet Forecasts: React.FC<Props> = ({ className, chartData = [] }) => {\n  const chartRef = useRef(null)\n  const hour = true;\n\n\n\n\n  useEffect(() => {\n    let data = chartData\n    if (hour) {\n      data = chartData[0].forecast\n    }\n    \n    let formattedData = data.map((el, i) => {\n      // console.log({ element: el });\n      if (hour) {\n        return {\n          label: el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0, 2),\n          value: el.temperatures.value\n        }\n      }\n      else {\n        return {\n          label: el.date,\n          value: el.forecast[12].temperatures.value\n        }\n      }\n    });\n\n    // let formattedDataDates = data.map((el, i) => {\n    //   return el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0,2)\n    // })\n\n    drawChart(formattedData, chartRef);\n\n\n    // const containerHeight = chartRef.current.clientHeight\n    // const containerWidth = chartRef.current.clientWidth\n    // console.log({containerWidth, containerHeight})\n    \n    // let svg = d3.select(chartRef.current)\n    //   .append(\"svg\")\n    //   // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    //   // .attr(\"viewBox\", \"0 0 300 300\")\n    //   .attr(\"width\", containerWidth)\n    //   .attr(\"height\", containerHeight)\n    //   .classed(\"svg-content\", true)  \n    \n    // let selection = svg.selectAll(\"rect\").data(formattedData);\n    // let yScale = d3.scaleLinear()\n    //   .domain([0, d3.max(formattedData)])\n    //   .range([0, containerHeight - 100]);\n    \n    // let xDateScale = d3.scalePoint()\n    //   .domain(formattedDataDates)\n    //   .range([0, containerWidth])\n    \n    // svg\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n    //   .call(d3.axisBottom(xDateScale));\n    \n    // let y_axis = d3.axisLeft()\n    //   .scale(yScale);\n\n    // svg.append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")\n    //   .call(y_axis);\n    \n    // selection\n    // .transition().duration(300)\n    //     .attr(\"height\", (d) => yScale(d))\n    //     .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n    // selection\n    //   .enter()\n    //   .append(\"rect\")\n    //   .attr(\"x\", (d, i) => i * 45)\n    //   .attr(\"y\", (d) => containerHeight)\n    //   .attr(\"width\", 40)\n    //   .attr(\"height\", 0)\n    //   .attr(\"fill\", \"steelblue\")\n    //   .transition().duration(300)\n    //   .attr(\"height\", (d) => yScale(d))\n    //   .attr(\"y\", (d) => containerHeight - yScale(d))\n    \n\n    // selection\n    //   .exit()\n    //   .transition().duration(300)\n    //       .attr(\"y\", (d) => containerHeight)\n    //       .attr(\"height\", 0)\n    //   .remove()\n  \n    },\n    [chartData]\n  )\n\n\n\n\n  const flags: any[] = [\n    {\n      text: \"today\",\n      color: \"--blue\"\n    },\n    {\n      text: \"month\",\n      color: \"--green\"\n    },\n    {\n      text: \"year\",\n      color: \"--teal\"\n    },\n  ]\n  return (\n    <section className={className}>\n      <div className=\"graphic\">\n        <div className=\"header\">\n          <span>Forecasts since</span>\n          {flags.map((flag, index) => (\n            <Flag\n              text={flag.text}\n              color={flag.color}\n              key={index}\n            />)\n          )}\n        </div>\n        <div className=\"chart\" id=\"chart\" ref={chartRef}>\n          \n        </div>\n      </div>\n      <div className=\"parameters\">\n\n      </div>\n    </section>\n  )\n}\n\n\nForecasts = styled(Forecasts)`\n  height: 498px;\n  background: var(--grey-light);\n  box-shadow: var(--shadow-sm);\n  width: 100%;\n  border-radius: 10px;\n  padding: 30px;\n  display: grid;\n  grid-template-columns: 70% 1fr;\n  grid-column-gap: 10px;\n  grid-area: forecasts;\n  align-self: start;\n  justify-content: space-between;\n\n  .header{\n    padding: 0px 0px 20px 0;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .graphic{\n    /* width: 70%; */\n  }\n  \n  .chart{\n    /* width: 694px; */\n    height: 378px;\n    background: white;\n    box-shadow: var(--shadow-sm);\n    position: relative;\n    width: 100%;\n    vertical-align: top;\n    overflow: hidden;\n  }\n\n\n\n  .parameters{\n    height: 378px;\n    /* width: 28%; */\n    background: white;\n    box-shadow: var(--shadow-sm);\n    align-self: flex-end;\n    \n  }\n`\n\nexport default  Forecasts"]},"metadata":{},"sourceType":"module"}