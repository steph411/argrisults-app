{"ast":null,"code":"import * as d3 from 'd3';\nexport var drawChart = function drawChart(formattedData, chartRef) {\n  var hour = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var labels = formattedData.map(function (el) {\n    return el.label;\n  });\n  var values = formattedData.map(function (el) {\n    return el.value;\n  });\n  var containerHeight = chartRef.current.clientHeight;\n  var containerWidth = chartRef.current.clientWidth;\n  console.log({\n    containerWidth: containerWidth,\n    containerHeight: containerHeight\n  });\n  var svg = d3.select(chartRef.current).append(\"svg\") // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  // .attr(\"viewBox\", \"0 0 300 300\")\n  .attr(\"width\", containerWidth).attr(\"height\", containerHeight).classed(\"svg-content\", true);\n  var selection = svg.selectAll(\"rect\").data(values);\n  var yScale = d3.scaleLinear().domain([0, d3.max(values)]) // .range([containerHeight, 0])\n  .range([0, containerHeight - 50]); // add axis and labels\n\n  var xDateScale = d3.scalePoint().domain(labels).range([0, containerWidth]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0, 0)\") // This controls the vertical position of the Axis\n  .call(d3.axisBottom(xDateScale));\n  var y_axis = d3.axisLeft().scale(yScale);\n  svg.append(\"g\").attr(\"transform\", \"translate(0, 300)\").call(y_axis);\n  selection.transition().duration(300).attr(\"height\", function (d) {\n    return yScale(d);\n  }).attr(\"y\", function (d) {\n    return containerHeight - yScale(d);\n  });\n  selection.enter().append(\"rect\").attr(\"x\", function (d, i) {\n    return i * 30;\n  }).attr(\"y\", function (d) {\n    return containerHeight;\n  }).attr(\"width\", 30).attr(\"height\", 0).attr(\"fill\", \"steelblue\").transition().duration(300).attr(\"height\", function (d) {\n    return yScale(d);\n  }).attr(\"y\", function (d) {\n    return containerHeight - yScale(d);\n  });\n  selection.exit().transition().duration(400).attr(\"y\", function (d) {\n    return containerHeight;\n  }).attr(\"height\", 0).remove();\n};","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/utils/chart.ts"],"names":["d3","drawChart","formattedData","chartRef","hour","labels","map","el","label","values","value","containerHeight","current","clientHeight","containerWidth","clientWidth","console","log","svg","select","append","attr","classed","selection","selectAll","data","yScale","scaleLinear","domain","max","range","xDateScale","scalePoint","call","axisBottom","y_axis","axisLeft","scale","transition","duration","d","enter","i","exit","remove"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\n\n\n\n\nexport const drawChart = (formattedData, chartRef, hour=true) => {\n  \n  \n  const labels = formattedData.map(el => el.label)\n  const values = formattedData.map(el => el.value)\n  const containerHeight = chartRef.current.clientHeight\n  const containerWidth = chartRef.current.clientWidth\n  console.log({containerWidth, containerHeight})\n  \n  let svg = d3.select(chartRef.current)\n    .append(\"svg\")\n    // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    // .attr(\"viewBox\", \"0 0 300 300\")\n    .attr(\"width\", containerWidth)\n    .attr(\"height\", containerHeight)\n    .classed(\"svg-content\", true)  \n  \n  let selection = svg.selectAll(\"rect\").data(values);\n  let yScale = d3.scaleLinear()\n    .domain([0, d3.max(values)])\n    // .range([containerHeight, 0])\n    .range([0, containerHeight - 50]);\n \n  // add axis and labels\n\n\n\n  let xDateScale = d3.scalePoint()\n      .domain(labels)\n      .range([0, containerWidth])\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n    .call(d3.axisBottom(xDateScale));\n  \n\n  \n  let y_axis = d3.axisLeft()\n    .scale(yScale);\n\n  svg.append(\"g\")\n    .attr(\"transform\", \"translate(0, 300)\")\n    .call(y_axis);\n  \n  selection\n  .transition().duration(300)\n      .attr(\"height\", (d) => yScale(d))\n      .attr(\"y\", (d) => containerHeight - yScale(d))\n  \n  selection\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\", (d, i) => i * 30)\n    .attr(\"y\", (d) => containerHeight)\n    .attr(\"width\", 30)\n    .attr(\"height\", 0)\n    .attr(\"fill\", \"steelblue\")\n    .transition().duration(300)\n    .attr(\"height\", (d) => yScale(d))\n    .attr(\"y\", (d) => containerHeight - yScale(d))\n  \n\n  selection\n    .exit()\n    .transition().duration(400)\n        .attr(\"y\", (d) => containerHeight)\n        .attr(\"height\", 0)\n    .remove()\n\n}"]},"metadata":{},"sourceType":"module"}