{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { drawChart } from '../utils';\n\nvar Flag = function Flag(_ref) {\n  var className = _ref.className,\n      color = _ref.color,\n      text = _ref.text;\n  return /*#__PURE__*/_jsx(\"a\", {\n    className: className,\n    children: text\n  });\n};\n\nFlag = styled(Flag).withConfig({\n  displayName: \"Forecasts__Flag\",\n  componentId: \"sc-373ftp-0\"\n})([\"background:\", \";padding:8px 20px;color:white;border-radius:20px;&:hover{cursor:pointer;box-shadow:var(--shadow-sm);}\"], function (props) {\n  return props.color ? \"var(\".concat(props.color, \")\") : \"var(--green)\";\n});\n\nvar Forecasts = function Forecasts(_ref2) {\n  var className = _ref2.className,\n      _ref2$chartData = _ref2.chartData,\n      chartData = _ref2$chartData === void 0 ? [] : _ref2$chartData;\n  var chartRef = useRef(null);\n  var hour = true;\n  useEffect(function () {\n    var data = chartData;\n\n    if (hour) {\n      data = chartData[0].forecast;\n    }\n\n    var formattedData = data.map(function (el, i) {\n      // console.log({ element: el });\n      if (hour) {\n        return {\n          label: el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0, 2),\n          value: el.temperatures.value\n        };\n      } else {\n        return {\n          label: el.date,\n          value: el.forecast[12].temperatures.value\n        };\n      }\n    }); // let formattedDataDates = data.map((el, i) => {\n    //   return el.endTime.split(\"T\")[1].split(\"+\")[0].slice(0,2)\n    // })\n\n    drawChart(formattedData, chartRef); // const containerHeight = chartRef.current.clientHeight\n    // const containerWidth = chartRef.current.clientWidth\n    // console.log({containerWidth, containerHeight})\n    // let svg = d3.select(chartRef.current)\n    //   .append(\"svg\")\n    //   // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n    //   // .attr(\"viewBox\", \"0 0 300 300\")\n    //   .attr(\"width\", containerWidth)\n    //   .attr(\"height\", containerHeight)\n    //   .classed(\"svg-content\", true)  \n    // let selection = svg.selectAll(\"rect\").data(formattedData);\n    // let yScale = d3.scaleLinear()\n    //   .domain([0, d3.max(formattedData)])\n    //   .range([0, containerHeight - 100]);\n    // let xDateScale = d3.scalePoint()\n    //   .domain(formattedDataDates)\n    //   .range([0, containerWidth])\n    // svg\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")      // This controls the vertical position of the Axis\n    //   .call(d3.axisBottom(xDateScale));\n    // let y_axis = d3.axisLeft()\n    //   .scale(yScale);\n    // svg.append(\"g\")\n    //   .attr(\"transform\", \"translate(0, 0)\")\n    //   .call(y_axis);\n    // selection\n    // .transition().duration(300)\n    //     .attr(\"height\", (d) => yScale(d))\n    //     .attr(\"y\", (d) => containerHeight - yScale(d))\n    // selection\n    //   .enter()\n    //   .append(\"rect\")\n    //   .attr(\"x\", (d, i) => i * 45)\n    //   .attr(\"y\", (d) => containerHeight)\n    //   .attr(\"width\", 40)\n    //   .attr(\"height\", 0)\n    //   .attr(\"fill\", \"steelblue\")\n    //   .transition().duration(300)\n    //   .attr(\"height\", (d) => yScale(d))\n    //   .attr(\"y\", (d) => containerHeight - yScale(d))\n    // selection\n    //   .exit()\n    //   .transition().duration(300)\n    //       .attr(\"y\", (d) => containerHeight)\n    //       .attr(\"height\", 0)\n    //   .remove()\n  }, [chartData]);\n  var flags = [{\n    text: \"today\",\n    color: \"--blue\"\n  }, {\n    text: \"month\",\n    color: \"--green\"\n  }, {\n    text: \"year\",\n    color: \"--teal\"\n  }];\n  return /*#__PURE__*/_jsxs(\"section\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"graphic\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          children: \"Forecasts since\"\n        }), flags.map(function (flag, index) {\n          return /*#__PURE__*/_jsx(Flag, {\n            text: flag.text,\n            color: flag.color\n          }, index);\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        ref: chartRef\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"parameters\"\n    })]\n  });\n};\n\nForecasts = styled(Forecasts).withConfig({\n  displayName: \"Forecasts\",\n  componentId: \"sc-373ftp-1\"\n})([\"height:498px;background:var(--grey-light);box-shadow:var(--shadow-sm);width:100%;border-radius:10px;padding:30px;display:grid;grid-template-columns:70% 1fr;grid-column-gap:10px;grid-area:forecasts;align-self:start;justify-content:space-between;.header{padding:0px 0px 20px 0;width:100%;display:flex;justify-content:space-between;}.graphic{}.chart{height:378px;background:white;box-shadow:var(--shadow-sm);position:relative;width:100%;vertical-align:top;overflow:hidden;}.parameters{height:378px;background:white;box-shadow:var(--shadow-sm);align-self:flex-end;}\"]);\nexport default Forecasts;","map":null,"metadata":{},"sourceType":"module"}