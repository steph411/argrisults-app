{"ast":null,"code":"import * as d3 from 'd3';\nexport const drawChart = (formattedData, chartRef, hour = true) => {\n  const labels = formattedData.map(el => el.label);\n  const values = formattedData.map(el => el.value);\n  const containerHeight = chartRef.current.clientHeight;\n  const containerWidth = chartRef.current.clientWidth;\n  console.log({\n    containerWidth,\n    containerHeight\n  });\n  let svg = d3.select(chartRef.current).append(\"svg\") // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  // .attr(\"viewBox\", \"0 0 300 300\")\n  .attr(\"width\", containerWidth).attr(\"height\", containerHeight).classed(\"svg-content\", true);\n  let selection = svg.selectAll(\"rect\").data(values);\n  let yScale = d3.scaleLinear().domain([0, d3.max(values)]) // .range([containerHeight, 0])\n  .range([0, containerHeight - 50]); // add axis and labels\n\n  let xDateScale = d3.scalePoint().domain(labels).range([0, containerWidth]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0, 0)\") // This controls the vertical position of the Axis\n  .call(d3.axisBottom(xDateScale));\n  let y_axis = d3.axisLeft().scale(yScale);\n  svg.append(\"g\").attr(\"transform\", \"translate(0, 300)\").call(y_axis);\n  selection.transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n  selection.enter().append(\"rect\").attr(\"x\", (d, i) => i * 45).attr(\"y\", d => containerHeight).attr(\"width\", 40).attr(\"height\", 0).attr(\"fill\", \"steelblue\").transition().duration(300).attr(\"height\", d => yScale(d)).attr(\"y\", d => containerHeight - yScale(d));\n  selection.exit().transition().duration(300).attr(\"y\", d => containerHeight).attr(\"height\", 0).remove();\n};","map":null,"metadata":{},"sourceType":"module"}