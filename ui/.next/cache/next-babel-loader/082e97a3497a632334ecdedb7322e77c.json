{"ast":null,"code":"import fetch from \"node-fetch\";\nconst tokenUrl = \"https://api.awhere.com/oauth/token\";\nconst baseApiUrl = process.env.BASE_API_URL;\n\nconst forecastsUrl = (lat, lon) => `${baseApiUrl}/weather/locations/${lat},${lon}/forecasts`;\n\nconst dailyWeatherUrl = (lat, lon, date = \"\") => {\n  let result = `${baseApiUrl}/weather/locations/${lat},${lon}/forecasts`;\n\n  if (date) {\n    result = `${result}/${date}`;\n  }\n\n  return result;\n};\n\nexport const getForecasts = async (lat, lon) => {\n  const access_token = await getAccessToken();\n  const url = forecastsUrl(lat, lon);\n  const req = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  });\n  const res = await req.json();\n  console.log(res);\n  return res.forecasts;\n};\nexport const getDailyWeather = async (lat, lon) => {\n  let date = new Date();\n  const formattedDate = date.toISOString().split(\"T\")[0];\n  const access_token = await getAccessToken();\n  const url = dailyWeatherUrl(lat, lon, formattedDate);\n  const req = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  });\n  const res = await req.json();\n  console.log(res);\n  return res.forecast[0];\n};\n\nconst getAccessToken = async () => {\n  const api_key = process.env.AWHERE_KEY;\n  const api_secret = process.env.AWHERE_SECRET;\n  const encodedKey = Buffer.from(`${api_key}:${api_secret}`).toString(\"base64\");\n  const req = await fetch(tokenUrl, {\n    method: \"POST\",\n    body: \"grant_type=client_credentials\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${encodedKey}`,\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  });\n  console.log(req);\n  const res = await req.json();\n  console.log(res);\n  return res.access_token;\n};","map":{"version":3,"sources":["/Users/lioneletaba/Documents/Projets/Perso/argrisults-app/ui/services/index.ts"],"names":["fetch","tokenUrl","baseApiUrl","process","env","BASE_API_URL","forecastsUrl","lat","lon","dailyWeatherUrl","date","result","getForecasts","access_token","getAccessToken","url","req","headers","Authorization","res","json","console","log","forecasts","getDailyWeather","Date","formattedDate","toISOString","split","forecast","api_key","AWHERE_KEY","api_secret","AWHERE_SECRET","encodedKey","Buffer","from","toString","method","body"],"mappings":"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","sourcesContent":["import fetch from  \"node-fetch\"\n\n\nconst tokenUrl = \"https://api.awhere.com/oauth/token\"\nconst baseApiUrl = process.env.BASE_API_URL\nconst forecastsUrl = (lat, lon) => `${baseApiUrl}/weather/locations/${lat},${lon}/forecasts`\nconst dailyWeatherUrl = (lat, lon, date=\"\") => {\n  let result = `${baseApiUrl}/weather/locations/${lat},${lon}/forecasts`\n  if (date){\n    result = `${result}/${date}`\n  }\n  return result;\n\n}\n\n  \n\n\nexport const getForecasts = async (lat, lon) => {\n  const access_token = await getAccessToken();\n  const url = forecastsUrl(lat, lon);\n  const req = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  })\n  const res = await req.json()\n  console.log(res)\n  return res.forecasts\n}\n\n\nexport const getDailyWeather = async (lat, lon) => {\n  let date = new Date();\n  const formattedDate = date.toISOString().split(\"T\")[0];\n  const access_token = await getAccessToken();\n  const url = dailyWeatherUrl(lat, lon, formattedDate);\n  const req = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  })\n  const res = await req.json()\n  console.log(res)\n  return res.forecast[0]\n}\n\n\n\n\n\n\nconst getAccessToken = async () => {\n  const api_key = process.env.AWHERE_KEY;\n  const api_secret = process.env.AWHERE_SECRET;\n  const encodedKey = Buffer.from(`${api_key}:${api_secret}`).toString(\"base64\");\n  const req = await fetch(tokenUrl, {\n    method: \"POST\",\n    body: \"grant_type=client_credentials\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${encodedKey}`,\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  })\n  console.log(req)\n  const res  = await req.json()\n  console.log(res);\n  return res.access_token\n}"]},"metadata":{},"sourceType":"module"}